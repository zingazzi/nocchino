import type { APIRequest, APIResponse, RequestDetails } from '../types';

import { activateNockForRequest, restoreNock } from './dynamicNock';

/**
 * Generic API Client for type-safe requests
 * Demonstrates how to use the generic types with Nocchino
 */
export class GenericAPIClient<TRequest = unknown, TResponse = unknown> {
  private baseUrl: string;

  private headers: Record<string, string>;

  constructor(baseUrl: string, headers: Record<string, string> = {}) {
    this.baseUrl = baseUrl;
    this.headers = headers;
  }

  /**
   * Make a type-safe API request
   * @param request - API request with generic types
   * @returns Promise with typed response
   */
  public async request<TReq = TRequest, TRes = TResponse>(
    request: APIRequest<TReq>,
  ): Promise<APIResponse<TRes>> {
    // Activate Nock intercepts for this request
    const requestDetails: RequestDetails<TReq, TRes> = {
      url: `${this.baseUrl}${request.url}`,
      method: request.method,
      headers: { ...this.headers, ...request.headers },
      ...(request.body && { body: request.body }),
    };

    activateNockForRequest(requestDetails);

    try {
      // In a real implementation, this would make an actual HTTP request
      // For now, we'll return a mock response
      const mockResponse = {
        data: {} as TRes,
        status: 200 as const,
        headers: {},
        message: 'Mock response generated by Nocchino',
      };

      return mockResponse;
    } finally {
      // Clean up Nock intercepts
      restoreNock();
    }
  }

  /**
   * Make a GET request
   * @param url - Request URL
   * @param headers - Additional headers
   * @returns Promise with typed response
   */
  public async get<TRes = TResponse>(
    url: string,
    headers: Record<string, string> = {},
  ): Promise<APIResponse<TRes>> {
    return this.request<TRequest, TRes>({
      url,
      method: 'GET',
      headers,
    });
  }

  /**
   * Make a POST request
   * @param url - Request URL
   * @param body - Request body
   * @param headers - Additional headers
   * @returns Promise with typed response
   */
  public async post<TReq = TRequest, TRes = TResponse>(
    url: string,
    body: TReq,
    headers: Record<string, string> = {},
  ): Promise<APIResponse<TRes>> {
    return this.request<TReq, TRes>({
      url,
      method: 'POST',
      body,
      headers,
    });
  }

  /**
   * Make a PUT request
   * @param url - Request URL
   * @param body - Request body
   * @param headers - Additional headers
   * @returns Promise with typed response
   */
  public async put<TReq = TRequest, TRes = TResponse>(
    url: string,
    body: TReq,
    headers: Record<string, string> = {},
  ): Promise<APIResponse<TRes>> {
    return this.request<TReq, TRes>({
      url,
      method: 'PUT',
      body,
      headers,
    });
  }

  /**
   * Make a DELETE request
   * @param url - Request URL
   * @param headers - Additional headers
   * @returns Promise with typed response
   */
  public async delete<TRes = TResponse>(
    url: string,
    headers: Record<string, string> = {},
  ): Promise<APIResponse<TRes>> {
    return this.request<TRequest, TRes>({
      url,
      method: 'DELETE',
      headers,
    });
  }
}
